---
title: "The Anatomy of a Hit"
subtitle: "Modeling Popularity of Billboard Artists using Spotify Audio Features"
author: 
  - Luca Carnegie
thanks: "Code and data are available at: https://github.com/lcarnegie/popularity-modeling. Thank you to Michaela Drouillard for your insights on Spotify and it's metrics. My sincere appreciation goes to Hannah Yu for your valuable last-minute edits. Special hat tip goes to Rajan Maghera and my amazing parents, Cristina and Shane for your support and encouragement. I could not have done this without you."
date: April 24 2024
date-format: long
abstract: "What makes a hit pop song? This paper examines the audio features that characterize mainstream music's biggest hits. By analyzing data from the discographies of the greatest artists on the Billboard Hot 100, the research identifies key attributes associated with popular songs. Multivariate regression analysis reveals that higher levels of danceability, explicit lyrics, and loudness are positively related to popularity, while emotional positivity (valence) exhibits a negative relationship. Overall, this work quantifies some factors that drive iconic pop successes and can empower professional pop musicians to make more informed creative decisions with their work."
format: pdf
toc: true
number-sections: true
bibliography: references.bib
nocite: |
  @*
---

```{r setup}
#| include: false
#| warning: false
#| message: false

# Load necessary libraries 
library(tidyverse)
library(ggplot2)
library(arrow)
library(kableExtra)
library(knitr)
library(broom)
library(modelsummary)
library(jtools)

# Read in data for visualization
spotify_data <- read_parquet("../data/analysis_data/dataset.parquet")


```

\newpage

# Introduction

Since the advent of recorded music, musicians have aspired to write hit songs and achieve mainstream success in the music industry. However, for major music companies, signing artists without a proven track record is a substantial risk, as most aspirants fail to produce hits. This has led to a concentrated market dominated by a small group of "superstars", such as Taylor Swift or Ed Sheeran, who consistently top the charts [@rosen1981]. Breaking into the music industry, then, presents a unique challenge for aspiring musicians' art: what elements contribute to a pop song's mass appeal?

The field of Hit Song Science, which employs statistical methods to predict song popularity, has gained traction in academia and industry with the increasingly widespread availability of economical computing resources. Researchers [@kim2021], students [@phametal2015], and likely record companies have attempted to construct models that attempt to explain song popularity, though the latter's efforts remain proprietary, leaving artists without access to knowledge that could prove valuable for advancing their careers.

This study diverges from previous approaches by constructing a dataset solely from the discographies of the best-performing artists on the Billboard Hot 100, the preeminent metric of success in the United States music industry. I employ multivariate regression to estimate a song's Spotify-generated popularity score, using several audio features derived from Spotify's API as predictors. By focusing exclusively on the most successful artists' music, the elements that define enduring hits in the US market can be identified.   

The regression results reveal statistically significant positive relationships between danceability, explicit lyrics, loudness, and Spotify popularity score, as well as a significant negative relationship between song valence (general positivity) and popularity score, after controlling for other variables.

In the current era of music streaming, competition for stardom is intense. Understanding the key elements driving song success could empower artists to craft hits more effectively and potentially achieve greater independence from record labels [@burke1997]. This data-driven approach could provide a strategic advantage for artists in the pursuit of mainstream success.

The paper is structured as follows: [@sec-data] provides a detailed overview of the dataset and analyzes each predictor individually; [@sec-model] outlines the regression model; [@sec-results] presents and discusses the model's results; and [@sec-discussion] critically examines the findings and their implications.


# Data Analysis {#sec-data}

The Billboard Hot 100 ranks the most popular U.S. songs weekly based on radio plays, sales, and streaming [@aboutbillboard]. Artists with songs frequently on this chart should have mass appeal, motivating the analysis of elements that define the popularity of those "hits". Using Billboard also scopes this analysis to solely the US market

Unlike other datasets like The Million Song dataset used by Pham et al., Spotify's web API provides ready-made quantitative audio features (tempo, key, danceability, etc.) as well as calculated popularity score based on recent and total play counts for artists' songs, facilitating analysis of the determinants of a song's popularity. 

Since the Spotify popularity score is based on both recency of streams and total number of streams, continually high scores should indicate frequent plays long after release. Therefore, the score can be thought of measuring a song's enduring popularity, whose qualities would be of definite interest to up-and-coming artists. As the leading music streamer in the U.S., Spotify's metrics can reasonably align with Billboard rankings, providing a relatively robust measure of a song's lasting popularity, which is crucial in attempting to infer the elements that make up a "hit".  

To acquire, clean and analyze the data, I used R [@citeR], the tidyverse [@tidyverse] and related software packages. Billboard's "Greatest of All Time Hot 100 Artists" [@greatestofhot100] list identified popular artists. The audio features of the Billboard artists' songs and popularity data were then downloaded from Spotify's API via the spotifyr [@spotifyr] package. Spotify data was current as of 2024, while Billboard rankings were from 2015. The data was cleaned using the dplyr [@dplyr] and janitor [@janitor] packages and saved using arrow [@arrow]. Variables were chosen based on expected impact on popularity, resulting in a dataset with 773 songs. 

For this analysis, the popularity score, valence (musical 'positivity'), danceability, mode (major or minor), presence of explicit lyrics, loudness, and song duration were made of interest. A sample of the cleaned dataset is shown in [@tbl-sample]. This and other tables were created using the knitr [@knitr] packages. Visualizations and modelling summaries used ggplot2 [@ggplot2] and modelsummary [@modelsummary].


```{r tbl-sample, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: Sample of Dataset
#| fig-align: center

#fix formatting before submitting


labelled_data <- spotify_data |>
  rename(
    `Artist Name` = artist_name,
    `Song Name` = song_name,
    Popularity = popularity,
    Mode = mode,
    Valence = valence, 
    Danceability = danceability, 
    `Explicit` = explicit, 
    `Loudness` = loudness, 
    `Duration` = duration_secs
  ) |>
  mutate(`Song Name` = "...") |> 
  head(3) |>
  arrange(`Artist Name`)
  
  kable(labelled_data, format = "markdown") |>
  kable_styling(font_size = 10)  # Control the width of specific columns
```

The dataset was then analyzed variable-by-variable. Popularity score was first investigated for potential discernable patterns. Then every other variable was examined based on its potential impact on popularity scores. 

## Popularity Score 

We first calculate summary statistics about the popularity scores in the dataset, shown in @tbl-sumstats-pop. 

```{r tbl-sumstats-pop}
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: Summary Statistics of Popularity (0-100)
#| fig-align: center

summary_stats <- spotify_data |>
  summarise(
    Mean = mean(popularity),
    `Std. Dev` = sd(popularity),
    Min = min(popularity),
    `25th percentile` = quantile(popularity, 0.25),
    Median = median(popularity),
    `75th percentile` = quantile(popularity, 0.75),
    Max = max(popularity)
  )

# Output the table using kable
kable(summary_stats, digits = 2, format = "html")

```

Then, we assess how popularity is distributed across our dataset using a histogram.  

```{r fig-pop-hist, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Histogram of Popularity Scores
#| fig-align: center

ggplot(spotify_data, aes(x = popularity)) +
  geom_histogram(bins = 14, fill = "blue", color = "black") + 
  labs(title = "Histogram of Popularity",
       x = "Popularity",
       y = "Density") +
  theme_minimal() + 
  theme(plot.title.position = "plot",
        plot.title = element_text(hjust = 0.5))

```

Against expectations, the histogram in @fig-pop-hist shows no skewed distribution toward higher popularity scores for the most popular artists. Although most songs have scores between 54 and 86, which indicates relatively lasting popularity, the curve looks somewhat bell-shaped. This indicates that there is an even spread of top performing and mediocre artists, even within the subset of the best performing artists in the world. 

## Valence

Next, we focus on valence. As one of Spotify's algorithmically generated metrics, valence attempts to measure the musical "positivity" of a song's audio, with scores ranging between 0.0 and 1.0. As Spotify's documentation says: "Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry)." [@spotifydocs]. 

We first calculate summary statistics for valence in @tbl-sumstats-val. 

```{r tbl-sumstats-val}
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: Summary Statistics of Valence (measured 0-1)
#| fig-align: center

summary_stats <- spotify_data |>
  summarise(
    Mean = mean(valence),
    `Std. Dev` = sd(valence),
    Min = min(valence),
    `25th percentile` = quantile(valence, 0.25),
    Median = median(valence),
    `75th percentile` = quantile(valence, 0.75),
    Max = max(valence)
  )

# Output the table using kable
kable(summary_stats, digits = 2, format = "html")

```

Then, we plot valence scores against popularity scores in a scatterplot in @fig-scatter-val. 

```{r fig-scatter-val, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Plot of Popularity against Valence
#| fig-align: center

# Scatter plot of Popularity vs. Energy
ggplot(spotify_data, aes(x = valence, y = popularity)) +
  geom_point(alpha = 0.6, color = "coral") +
  ggtitle("Popularity vs. Valence") +
  xlab("Valence") +
  ylab("Popularity Score") +
  theme(plot.title.position = "plot",
        plot.title = element_text(hjust = 0.5)
  )
```

When plotting valence values against popularity scores, though, no clear linear trend between valence and popularity makes itself apparent, although a clumping of high valence scores near 1.00, suggests potential data issues.
## Danceability

Like valence, danceability is another algorithmically calculated metric by Spotify. In their API documentation, Spotify says that "Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable." @spotifydocs. As before, summary statistics are presented in @tbl-sumstats-dance

```{r tbl-sumstats-dance}
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: Summary Statistics of danceability (measured 0-1)
#| fig-align: center

summary_stats <- spotify_data |>
  summarise(
    Mean = mean(danceability),
    `Std. Dev` = sd(danceability),
    Min = min(danceability),
    `25th percentile` = quantile(danceability, 0.25),
    Median = median(danceability),
    `75th percentile` = quantile(danceability, 0.75),
    Max = max(danceability)
  )

# Output the table using kable
kable(summary_stats, digits = 2, format = "html")

```

```{r fig-scatter-danceability, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Plot of Popularity against Danceability
#| fig-align: center

# Scatter plot of Popularity vs. Energy
ggplot(spotify_data, aes(x = danceability, y = popularity)) +
  geom_point(alpha = 0.6, color = "coral") +
  ggtitle("Popularity vs. Danceability") +
  xlab("Danceability") +
  ylab("Popularity Score") +
  theme(plot.title.position = "plot",
        plot.title = element_text(hjust = 0.5)
  )



```

Plotting the danceability scores against popularity in @fig-scatter-danceability shows a weak association between danceability and popularity score, however.  


## Mode

Musical mode indicates whether a song is in a major ('happier') or minor key ('sadder'). Unlike valence, which is calculated from a variety of physical metrics, musical mode is inherent to musical piece and can be inferred from the arrangement of notes in a song. In the dataset, 1 indicates the song is major while 0 is minor. Due to mode's binary nature, it is best summarized in graphs. 

```{r fig-majmin-barchart, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Counts of Major and Minor Songs
#| fig-align: center

# Summarizing the data to count major vs. minor songs
song_counts <- spotify_data |>
  group_by(mode) |>
  summarise(count = n()) |>
  mutate(mode = if_else(mode == 1, "Major", "Minor"))

# Plotting the counts of major and minor songs
ggplot(song_counts, aes(x = mode, y = count, fill = mode)) +
  geom_col() +
  ggtitle("Count of Major vs. Minor Songs") +
  xlab("Song Mode") +
  ylab("Number of Songs") +
  scale_fill_manual(
    values = c("Major" = "skyblue", "Minor" = "salmon"),
    name = "Musical Mode"
    ) +
  theme_minimal() +  # Adds a minimal theme for better aesthetics
  theme(
    axis.text.x = element_blank(),  # Hides the x-axis text
    axis.ticks.x = element_blank(), 
    plot.title.position = "plot",
    plot.title = element_text(hjust = 0.5)
  )

```

@fig-majmin-barchart shows that the most popular songs are in a major key, with more than twice as many major songs than minor songs.


```{r fig-mode-density-plot, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Distribution of Popularity, by mode
#| fig-align: center

# Comparing popularity distributions for different modes
ggplot(spotify_data, aes(x = popularity, fill = as.factor(mode))) +
  geom_density(alpha = 0.5) +
  ggtitle("Popularity Distribution by Mode") +
  xlab("Popularity Score") +
  ylab("Density") +
  scale_fill_manual(
    values = c("dodgerblue", "gold"), labels = c("Minor", "Major"), 
    name = "Musical Mode", 
    ) +
  theme(
    plot.title = element_text(hjust = 0.5)
  )

```

The density plot in @fig-mode-density-plot shows that although there are more major songs overall, there actually appears to be more songs in minor keys that have higher popularity scores. This means that audiences may tend to have a higher preference for songs in minor keys over major. 

## Explicit Status

Spotify records whether a song contains explicit lyrics through reporting by the music publishers. Similar to mode, explicitness is best summarized through graphs. 

```{r fig-explicit-bar}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Count of Explicit and Non-Explicit Songs
#| fig-align: center

# Summarizing the data to count explicit vs. non-explicit songs
song_counts <- spotify_data |>
  group_by(explicit) |>
  summarise(count = n()) |>
  mutate(explicit = if_else(explicit == 1, "Explicit", "Not Explicit"))

# Plotting the counts of explicit and non-explicit songs
ggplot(song_counts, aes(x = explicit, y = count, fill = explicit)) +
  geom_col() +  # geom_col is used for bar plots with predefined data summaries
  ggtitle("Count of Explicit vs. Non-Explicit Songs") +
  xlab("Song Type") +
  ylab("Number of Songs") +
  scale_fill_manual(
    values = c("Not Explicit" = "skyblue", "Explicit" = "salmon"),
    name = "Explicit Content"
    ) +
  theme_minimal()  # Adds a minimal theme for better aesthetics
```

@fig-explicit-bar shows an imbalanced amount of non-explicit songs among popular artists, with more than seven times that of the number of explicit songs. That could be a artifact of radio stations preferences for songs without explicit language. 

```{r fig-explicit-density, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Distribution of Popularity, by presence of explicit lyrics
#| fig-align: center

# Comparing popularity distributions for explicit status
ggplot(spotify_data, aes(x = popularity, fill = as.factor(explicit))) +
  geom_density(alpha = 0.5) +
  ggtitle("Popularity Distribution by Explicit Status") +
  xlab("Popularity Score") +
  ylab("Density") +
  scale_fill_manual(
    values = c("dodgerblue", "gold"), 
    labels = c("Not Explicit", "Explicit"), 
    name = "Explicit Content"
    ) + 
  theme(
    plot.title = element_text(hjust = 0.5)
  )
```

Comparing the distribution of popularity scores between explicit and not-explicit songs in @fig-explicit-density shows a different story when it comes to popularity score on Spotify. Here, we see that explicit songs have the highest density at higher popularity scores, which indicates that explicit songs tend to be given higher popularity scores on average. This could mean that explicit songs are simply more popular on streaming services like Spotify, where users can choose what music they would like to listen to. 

## Loudness

The average loudness of a song, in decibels (dB) is calculated by averaging the height of the waveforms in a particular song.Summary statistics are presented in @tbl-sumstats-loudness. In @fig-scatter-loudness we plot loudness against popularity to assess any relationship between the two variables. 

```{r tbl-sumstats-loudness}
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: Summary Statistics of Loudness (measured in dB)
#| fig-align: center

summary_stats <- spotify_data |>
  summarise(
    Mean = mean(loudness),
    `Std. Dev` = sd(loudness),
    Min = min(loudness),
    `25th percentile` = quantile(loudness, 0.25),
    Median = median(loudness),
    `75th percentile` = quantile(loudness, 0.75),
    Max = max(loudness)
  )

# Output the table using kable
kable(summary_stats, digits = 2, format = "html")

```

```{r fig-scatter-loudness, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Plot of Popularity against Loudness
#| fig-align: center

# Scatter plot of Popularity vs. Energy
ggplot(spotify_data, aes(x = loudness, y = popularity)) +
  geom_point(alpha = 0.6, color = "coral") +
  ggtitle("Popularity vs. Loudness") +
  xlab("Loudness") +
  ylab("Popularity Score") +
  theme(plot.title.position = "plot",
        plot.title = element_text(hjust = 0.5)
  )
```

\newpage
The plot shows no clear linear relationship between loudness and popularity, likely due to the varied nature of popular music and other confounding factors. That makes sense, since there could be songs that are "known" for being soft and emotional, while others are loud and intense. Those are two of many descriptions one could give to the multitude of styles and expressions within the dataset. Therefore, given the varied nature of pop music, it is to be expected to not observe an overtly linear relationship between solely loudness and popularity score. 

## Duration 

Duration's effect on popularity was then investigated. According to @fig-duration-hist, most songs written by artists on the "Greatest Billboard Hot 100 Artists of All Time" range from 2.5 to 5 minutes. However, @fig-dur-scatter reveals no discernible linear relationship between song duration and Spotify popularity score. Summary statistics on duration are presented in @tbl-sumstats-duration. 

```{r tbl-sumstats-duration}
#| message: false
#| echo: false
#| warning: false
#| tbl-cap: Summary Statistics of Duration (measured in minutes)
#| fig-align: center

summary_stats <- spotify_data |>
  mutate(duration_secs = duration_secs/60) |> #convert to minutes
  summarise(
    Mean = mean(duration_secs),
    `Std. Dev` = sd(duration_secs),
    Min = min(duration_secs),
    `25th percentile` = quantile(duration_secs, 0.25),
    Median = median(duration_secs),
    `75th percentile` = quantile(duration_secs, 0.75),
    Max = max(duration_secs)
  )

# Output the table using kable
kable(summary_stats, digits = 2, format = "html")

```

```{r fig-duration-hist, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Histogram of Song Durations
#| fig-align: center

ggplot(spotify_data, aes(x = duration_secs/60)) +
  geom_histogram(bins = 20, fill = "blue", color = "black") + 
  labs(title = "Histogram of Song Duration",
       x = "Duration (mins)",
       y = "Density") +
  theme_minimal() + 
  theme(plot.title.position = "plot",
        plot.title = element_text(hjust = 0.5))

```

```{r fig-dur-scatter, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: Plot of Popularity against Duration
#| fig-align: center

# Scatter plot of Popularity vs. Energy
ggplot(spotify_data, aes(x = duration_secs, y = popularity)) +
  geom_point(alpha = 0.6, color = "coral") +
  ggtitle("Popularity vs. Duration") +
  xlab("Duration") +
  ylab("Popularity Score") +
  theme(plot.title.position = "plot",
        plot.title = element_text(hjust = 0.5)
  )
```

\newpage

\newpage 
# Data Modelling {#sec-model}

While analyzing individual variables provides surface-level insights into the determinants of the popularity of a song, the complex factors underpinning musics's popularity necessitates accounting for interactions between variables for reasonable and informative inference.

## Model justification
Creating a linear regression model of this dataset is motivated by the fact that it can account for individual relationships between the audio features and the popularity, as well the relationships between the audio features themselves. By running a linear regression model the effects of a particular variable on a Spotify popularity score can be isolated, while also controlling for the effects of the other variables at the same time. 

Before conducting the analysis, however, several tests were conducted (shown in @sec-testing) to verify the data fit within the linear regression assumptions of linearity, normally distributed errors, and homoscedasticity of residuals. This ensured that the data was well suited for analysis using a multiple regression analysis.

## Model set-up

We are interested in investigating the relationship between several variables and popularity. These variables are: valence, danceability, mode, explicit lyrics, loudness, and duration. For each of the variables we are investigating, we have a null and an alternative hypothesis. 


**The null hypothesis ($H_0$):** there is no significant linear relationship between one of the variables and a given Spotify popularity score, holding everything else constant. 


**The alternative hypothesis ($H_1$):** a significant linear relationship exists between one of the variables and a given Spotify popularity score, holding everything else constant. 

For a particular variable, a low p-value for the regression coefficient would provide evidence against the null hypothesis, indicating that the variable has a meaningful effect on Spotify popularity score. On the other hand, a high p-value for a variable would suggest that there is not enough evidence to reject the null hypothesis, and there may be no significant linear relationship between that variable and the Spotify popularity score. 

Ultimately, the results of the analysis will inform whether there is any significant linear relationship, controlling for the other variables,between each the variables and a song's Spotify popularity score.

The aim of computing a regression model is to estimate the equation for a line with the coefficients $\beta_0$ to $\beta_6$ so that the difference (error) between the predicted line and the data points is minimized. By doing this, we get an equation for a line that best fits the data, allowing for the estimation of a Spotify popularity score for a given set of audio features. With a multiple regression, we use multiple different predictors (or independent variables) to predict a single outcome variable. 

The equation for our linear model can be written as 

\begin{center}
$S = \beta_0 + \beta_1V + \beta_2D + \beta_3M + \beta_4E + \beta_5L + \beta_6T + \epsilon$
\end{center}

The dependent variable $S$ represents the Spotify popularity score measured from 0 to 100. 

- $V$ denotes the valence (emotional positivity) of the song, measured from 0 to 1, where 1 is the most positive. The coefficient $\beta_1$ quantifies how a one-unit increase in valence (e.g., from 0.5 to 1.0) affects the popularity score $S$. 

- $D$ represents the danceability of the song, also measured from 0 to 1, with higher values indicating more danceability. The coefficient $\beta_2$ captures the change in $S$ for a one-unit increase in danceability. 

- $M$, a binary variable indicates the musical mode (0 for minor, 1 for major), with $\beta_3$ reflecting the difference in popularity between major and minor keys. 

- $E$, another binary variable, indicates explicit lyrics (0 for non-explicit, 1 for explicit), where $\beta_4$ estimates the effect of explicit content on popularity. 

- $L$ denotes the loudness of the song in decibels, with $\beta_5$ quantifying how a one-decibel increase in loudness impacts the popularity score $S$. 

- $T$ (for time), represents the duration of the song in seconds, and $\beta_6$ estimates the effect of an additional second on the popularity score.


# Results {#sec-results}

By running our model with the data collected from Spotify, we get the  results in @tbl-model:

```{r tbl-model}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center

# Load the model from an RDS file
model <- readRDS("../models/model.rds")

# Get summary
model_summary <- summary(model)

# Extract coefficients
coefficients_df <- tibble(
  Term = rownames(model_summary$coefficients),
  `Coefficient Estimate` = model_summary$coefficients[, "Estimate"],
  `Std. Error` = model_summary$coefficients[, "Std. Error"],
  Statistic = model_summary$coefficients[, "t value"],
  `P-value` = model_summary$coefficients[, "Pr(>|t|)"]
)
kable(coefficients_df, 
      digits = 2, 
      format = "html",
      caption = "Linear Model of Spotify Popularity Summary"
    )
```

The intercept (65.85) represents the predicted value of the dependent variable when all the independent variables are set to zero. However, since most of the predictors are both scaled or binary, the interpretation of the intercept is not very meaningful in the context of this analysis.

```{r fig-effect-plot-valence, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Effect Plot of Valence on Popularity"
#| fig-align: center

effect_plot(model, 
            pred = valence, 
            interval = TRUE, 
            plot.points = TRUE, 
            jitter = 0.05
          )


```

Valence (shown in @fig-effect-plot-valence), which measures the emotional positivity of a song on a scale of 0 to 1, has a negative coefficient (-10.96). This suggests that when comparing two songs that are the same in danceability, mode, explicit lyrics, loudness, and duration, the song with a valence (emotional positivity) score that is 1 unit higher is predicted to have a Spotify popularity score that is 11 points lower, on average.


```{r fig-effect-plot-danceability, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Effect Plot of Danceability on Popularity"
#| fig-align: center

effect_plot(model, 
            pred = danceability, 
            interval = TRUE, 
            plot.points = TRUE, 
            jitter = 0.05
          )
```

Danceability (shown in @fig-effect-plot-danceability), also scaled from 0 to 1, has a positive coefficient (18.24). This means that when comparing two songs that have the same valence, mode, explicit lyrics, loudness, and duration, the song with a danceability score that is 1 unit higher is predicted to have a Spotify popularity score that is 18 points higher, on average.

```{r fig-effect-plot-mode, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Effect Plot of Musical Mode on Popularity"
#| fig-align: center

effect_plot(model, 
            pred = mode, 
            interval = TRUE, 
            plot.points = TRUE, 
            jitter = 0.05
          )


```

Mode is a binary variable (0 being minor, 1 being major), with a negative coefficient (-0.85), but has a p-value of 0.37, which indicates no statistical significance. Since the p-value is too high for our alternative hypothesis to be satisfied, we revert to our null hypothesis. We conclude that an average song's musical mode does not have a significant effect on the song's Spotify popularity score. I visualize this in @fig-effect-plot-mode. 

```{r fig-effect-plot-explicit, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Effect Plot of Explicit Lyrics on Popularity"
#| fig-align: center

effect_plot(model, 
            pred = explicit, 
            interval = TRUE, 
            plot.points = TRUE, 
            jitter = 0.05
          )


```

Explicit (shown in @fig-effect-plot-explicit) is another binary variable (indicating the presence of explicit lyrics), with a positive coefficient (10.10). This implies that when comparing two songs that are the same in other variables, the song that contains explicit lyrics is predicted to have a Spotify popularity score that is 10 points higher, on average, compared to a song without explicit lyrics.

```{r fig-effect-plot-loudness, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Effect Plot of Loudness on Popularity"
#| fig-align: center

effect_plot(model, 
            pred = loudness, 
            interval = TRUE, 
            plot.points = TRUE, 
            jitter = 0.05
          )


```

Loudness (shown in @fig-effect-plot-loudness), measured in decibels, has a positive coefficient (0.82). We can say that when comparing two songs that have the same in other variables, the song with an average loudness level that is 1 decibel higher is predicted to have a Spotify popularity score that is 0.82 points higher, on average.

```{r fig-effect-plot-duration, fig.height=3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Effect Plot of Song Duration on Popularity"
#| fig-align: center

effect_plot(model, 
            pred = duration_secs, 
            interval = TRUE, 
            plot.points = TRUE, 
            jitter = 0.05
          )


```

Duration (@fig-effect-plot-duration) has a positive coefficient (0.01) with a p-value of 0.10, which indicates the coefficient has low statistical significance. We can say then, with low confidence, that when comparing two songs that have the same levels of valence, danceability, mode, explicit lyrics, and duration, the song with a duration 1 second longer is predicted to have a Spotify popularity score that is 0.01 points higher, on average.

Taken together, the regression results indicate that higher Spotify popularity scores are associated with danceability, explicit lyrics, loudness, and to a lesser extent, song duration, while valence (emotional positivity) has a negative association. The musical mode does not appear to have a significant effect on popularity when other predictors are accounted for.

# Discussion {#sec-discussion}

These findings offer valuable insights into the extensive efforts undertaken by music technology companies like Spotify to quantify and understand the multifaceted dynamics of music culture. The analysis underscores the potential impact and utility of quantitative, data-driven methods in comprehending and shaping cultural phenomena like popular music.

## Impact of Results

While attempting to reduce the inherently complex artistic medium of music to quantitative measures can in some cases be naïve and reductive, having a data-driven understanding of what elements made the most popular artists who they are could have crucial implications for the life and work of up and coming popular artists. The analysis demonstrates that even with relatively basic domain knowledge of the music industry, anyone can uncover interesting trends and patterns in previously released music. 

Armed with the knowledge of what elements work in making music popular, artists and music creators can be more empowered in their creative process. Using the insights from my analysis, they can be enabled to strategically focus their creative efforts and artistic vision on incorporating these elements, potentially mitigating common challenges such as writer's block or creative stagnation. They could also choose to diverge from these elements in order to explore new genres or music styles that may not be popular now, but could be in the future. Knowing the current trends now could inspire artists to make better art that effectively and innovatively builds on what has come before. 

## Weaknesses 

There are weaknesses and limitations in this research that warrant consideration. The age of the data used, with the Billboard Greatest of All Time list concluding in 2015, may not fully capture contemporary trends and shifts in music culture, especially given the rapid rise of social media platforms like TikTok that drive rapid virality and micro-trends in popular music consumption. 

Additionally, the crowdsourced nature of certain audio features like valence and danceability, initially derived from subjective assessments by college interns @drouillard2024, introduces a clear element of human subjectivity and potential bias in the collection of data, which could undermine the validity and generalizability of the relationships observed between these features and popularity scores. The reliance solely on Spotify popularity scores as the dependent variable could bias the results toward newer music versus older, more established releases, although the recency factor incorporated into Spotify's scoring algorithm could potentially mitigate this concern for tracks that have maintained enduring popularity over time. In particular, given the little amount of open and reliable information about how the Spotify popularity score and other generated metrics are calculated, it is worth questioning whether if those scores are associated with popularity scores by design.

There could also be potential methodological issues stemming from the complex and interrelated nature of the data itself. Most obviously, potential multicollinearity among the predictor variables (audio features) could affect the interpretation and relative influence of individual variables on popularity scores.  

Moreover, the use of a linear regression model, while providing initial insights, could oversimplify the relationships by failing to capture non-linear or interaction effects among the variables. The dataset's limited scope, comprising only the top 10 songs per artist and excluding some tracks due to missing audio feature data from Spotify's API, restricts the sample size and may impact the precision and robustness of the parameter estimates.

## Next steps 

To address the weaknesses and expand upon the present findings, there are several avenues for future research emerge. 

Constructing a more comprehensive dataset with complete artist discographies and a broader array of audio features could better capture the complex relationships between musical characteristics and popularity. Incorporating alternative data sources or popularity metrics beyond the Spotify platform could provide further insights into the determinants of song appeal and resonance with audiences, and could make the results more generalizable to pop music at large. That said, few, if any, institutions have the influence or technical capabilities as Spotify to be able to analyze and categorize the vast amounts of audio data present in their vast library. Looking into cross-referencing this analysis with other datasets mentioned, like the Million Song Dataset, could be an option for improving the generalizability of the results. 

To improve upon the methodological challenges, looking into other linear model designs, such as Bayesian models, could simplify workflows for getting better inferences on updated data. This is especially salient given the constant re-calculating of popularity scores by Spotify. Exploring non-linear modeling techniques or machine learning algorithms may also uncover nuanced patterns and interactions that simpler linear models cannot detect. 

Repeating this analysis on specific musical genres, focusing on particular artists, or using different definitions of success in popular music could also uncover genre-specific relationships or other variable influences that may be still obscured despite in light of me doing this work.  

My approach affords merit as the first step by a cultural analyst in using the openly available data from Spotify to analyze and quantify the elements of what could make popular music popular. Through this analysis, cultural analysts should be inspired to continue work uncovering the elements that make up popular pop music. Artists also should be inspired to create better, more interesting art, rather than be afraid of their work being reduced down to a number; doing statistics is about simplifying, rather than a completely describing the world. Although much was learned in this analysis, there is still much to discover about the uniquely human elements of what makes our global culture tick.  

\newpage



# References

::: {#refs}
:::

\newpage

\appendix

# Appendix {#sec-appendix}

## Model Testing {#sec-testing}  

```{r model-testing}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center

# Residuals Plot
plot(model$fitted.values, residuals(model),
     main = "Residuals vs Fitted",
     xlab = "Fitted values",
     ylab = "Residuals")
abline(h = 0, col = "red")

# Q-Q Plot
qqnorm(residuals(model))
qqline(residuals(model), col = "steelblue")

#Scale-Location Plot 
plot(model$fitted.values, sqrt(abs(residuals(model))),
     main = "Scale-Location Plot",
     xlab = "Fitted values",
     ylab = "Square Root of |Residuals|")

# Residual vs Leverage Plot
plot(hatvalues(model), residuals(model),
     main = "Residuals vs Leverage",
     xlab = "Leverage",
     ylab = "Residuals")
abline(h = 0, col = "red")

```